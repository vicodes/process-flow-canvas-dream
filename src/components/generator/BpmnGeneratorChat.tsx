
import React, { useState, useEffect } from 'react';
import { Send, Settings, Cpu, Bot } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import { cn } from '@/lib/utils';
import { LoadingIcon } from '@/components/ui/loading-icon';
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

interface Message {
  id: string;
  content: string;
  isUser: boolean;
}

interface BpmnGeneratorChatProps {
  onBpmnGenerated: (xml: string) => void;
}

type AIModel = 'gpt-4o' | 'gpt-4o-mini' | 'gpt-4.5-preview';

const BpmnGeneratorChat: React.FC<BpmnGeneratorChatProps> = ({ onBpmnGenerated }) => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      content: 'Hi! I can help you generate BPMN diagrams from your text descriptions. Just tell me what process you want to model.',
      isUser: false,
    },
  ]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [selectedModel, setSelectedModel] = useState<AIModel>('gpt-4o-mini');
  const [pollingStatus, setPollingStatus] = useState<'idle' | 'polling'>('idle');

  // Function to poll the API every 5 seconds
  useEffect(() => {
    const pollAPI = async () => {
      try {
        // Simulate API call
        const response = await fetch('https://api.example.com/status', { 
          method: 'GET',
          headers: { 'Content-Type': 'application/json' }
        }).catch(() => {
          // Handle network errors silently for polling
          return null;
        });
        
        // If we wanted to do something with the response, we would do it here
        console.log('Polling API for updates...');
      } catch (error) {
        // Silent error handling for polling
        console.error('Error polling API:', error);
      }
    };

    const intervalId = setInterval(() => {
      if (pollingStatus === 'polling') {
        pollAPI();
      }
    }, 5000);

    // Start polling when component mounts
    setPollingStatus('polling');

    return () => {
      clearInterval(intervalId);
    };
  }, [pollingStatus]);

  const handleSendMessage = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!input.trim() || isLoading) return;
    
    const userMessage: Message = {
      id: Date.now().toString(),
      content: input,
      isUser: true,
    };
    
    setMessages((prev) => [...prev, userMessage]);
    setInput('');
    setIsLoading(true);
    
    try {
      // In a real implementation, this would call an API to generate BPMN
      // For now, we'll simulate a response after a brief delay
      await new Promise(resolve => setTimeout(resolve, 1500 + Math.random() * 1000));
      
      // Display which model is generating the response
      const modelInfo = selectedModel === 'gpt-4o' ? 'powerful' : 
                       selectedModel === 'gpt-4o-mini' ? 'efficient' :
                       'advanced';
      
      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: `Using the ${modelInfo} model, I've generated a BPMN diagram based on your description: "${input}"`,
        isUser: false,
      };
      
      setMessages((prev) => [...prev, botMessage]);
      
      // Generate a simple BPMN diagram
      // This is a placeholder - in a real app, this would be generated by an AI service
      const sampleBpmn = `<?xml version="1.0" encoding="UTF-8"?>
<bpmn:definitions xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" id="Definitions_1" targetNamespace="http://bpmn.io/schema/bpmn">
  <bpmn:process id="Process_1" isExecutable="false">
    <bpmn:startEvent id="StartEvent_1" name="Start">
      <bpmn:outgoing>Flow_1</bpmn:outgoing>
    </bpmn:startEvent>
    <bpmn:task id="Activity_1" name="Process Request">
      <bpmn:incoming>Flow_1</bpmn:incoming>
      <bpmn:outgoing>Flow_2</bpmn:outgoing>
    </bpmn:task>
    <bpmn:sequenceFlow id="Flow_1" sourceRef="StartEvent_1" targetRef="Activity_1" />
    <bpmn:exclusiveGateway id="Gateway_1" name="Review Decision">
      <bpmn:incoming>Flow_2</bpmn:incoming>
      <bpmn:outgoing>Flow_3</bpmn:outgoing>
      <bpmn:outgoing>Flow_4</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:sequenceFlow id="Flow_2" sourceRef="Activity_1" targetRef="Gateway_1" />
    <bpmn:task id="Activity_2" name="Approve">
      <bpmn:incoming>Flow_3</bpmn:incoming>
      <bpmn:outgoing>Flow_5</bpmn:outgoing>
    </bpmn:task>
    <bpmn:sequenceFlow id="Flow_3" name="Yes" sourceRef="Gateway_1" targetRef="Activity_2" />
    <bpmn:task id="Activity_3" name="Reject">
      <bpmn:incoming>Flow_4</bpmn:incoming>
      <bpmn:outgoing>Flow_6</bpmn:outgoing>
    </bpmn:task>
    <bpmn:sequenceFlow id="Flow_4" name="No" sourceRef="Gateway_1" targetRef="Activity_3" />
    <bpmn:endEvent id="EndEvent_1" name="End">
      <bpmn:incoming>Flow_5</bpmn:incoming>
      <bpmn:incoming>Flow_6</bpmn:incoming>
    </bpmn:endEvent>
    <bpmn:sequenceFlow id="Flow_5" sourceRef="Activity_2" targetRef="EndEvent_1" />
    <bpmn:sequenceFlow id="Flow_6" sourceRef="Activity_3" targetRef="EndEvent_1" />
  </bpmn:process>
  <bpmndi:BPMNDiagram id="BPMNDiagram_1">
    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="Process_1">
      <bpmndi:BPMNShape id="StartEvent_1_di" bpmnElement="StartEvent_1">
        <dc:Bounds x="152" y="152" width="36" height="36" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="155" y="195" width="30" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1_di" bpmnElement="Activity_1">
        <dc:Bounds x="240" y="130" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Flow_1_di" bpmnElement="Flow_1">
        <di:waypoint x="188" y="170" />
        <di:waypoint x="240" y="170" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNShape id="Gateway_1_di" bpmnElement="Gateway_1" isMarkerVisible="true">
        <dc:Bounds x="395" y="145" width="50" height="50" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="395" y="121" width="50" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Flow_2_di" bpmnElement="Flow_2">
        <di:waypoint x="340" y="170" />
        <di:waypoint x="395" y="170" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNShape id="Activity_2_di" bpmnElement="Activity_2">
        <dc:Bounds x="500" y="80" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Flow_3_di" bpmnElement="Flow_3">
        <di:waypoint x="420" y="145" />
        <di:waypoint x="420" y="120" />
        <di:waypoint x="500" y="120" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="450" y="102" width="18" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNShape id="Activity_3_di" bpmnElement="Activity_3">
        <dc:Bounds x="500" y="190" width="100" height="80" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Flow_4_di" bpmnElement="Flow_4">
        <di:waypoint x="420" y="195" />
        <di:waypoint x="420" y="230" />
        <di:waypoint x="500" y="230" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="450" y="233" width="15" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNShape id="EndEvent_1_di" bpmnElement="EndEvent_1">
        <dc:Bounds x="652" y="152" width="36" height="36" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="660" y="195" width="20" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Flow_5_di" bpmnElement="Flow_5">
        <di:waypoint x="600" y="120" />
        <di:waypoint x="626" y="120" />
        <di:waypoint x="626" y="170" />
        <di:waypoint x="652" y="170" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_6_di" bpmnElement="Flow_6">
        <di:waypoint x="600" y="230" />
        <di:waypoint x="626" y="230" />
        <di:waypoint x="626" y="170" />
        <di:waypoint x="652" y="170" />
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</bpmn:definitions>`;
      
      // Pass the generated BPMN to the parent component
      onBpmnGenerated(sampleBpmn);
      
    } catch (error) {
      console.error('Error generating BPMN:', error);
      
      // Add an error message
      setMessages((prev) => [
        ...prev,
        {
          id: (Date.now() + 1).toString(),
          content: 'Sorry, I encountered an error while generating the BPMN diagram. Please try again.',
          isUser: false,
        },
      ]);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex flex-col h-full border rounded-md bg-white overflow-hidden">
      <div className="p-3 border-b bg-primary-50 flex justify-between items-center">
        <div className="flex items-center space-x-2">
          <Bot className="h-5 w-5 text-primary-600" />
          <h2 className="font-semibold">BPMN Generator Assistant</h2>
        </div>
        <div className="flex items-center">
          <Select value={selectedModel} onValueChange={(value) => setSelectedModel(value as AIModel)}>
            <SelectTrigger className="w-[180px] h-8 text-xs">
              <SelectValue placeholder="Select model" />
            </SelectTrigger>
            <SelectContent>
              <SelectGroup>
                <SelectLabel>AI Models</SelectLabel>
                <SelectItem value="gpt-4o-mini">
                  <div className="flex items-center">
                    <Cpu className="mr-2 h-4 w-4" />
                    <span>GPT-4o Mini (Fast)</span>
                  </div>
                </SelectItem>
                <SelectItem value="gpt-4o">
                  <div className="flex items-center">
                    <Cpu className="mr-2 h-4 w-4" />
                    <span>GPT-4o (Balanced)</span>
                  </div>
                </SelectItem>
                <SelectItem value="gpt-4.5-preview">
                  <div className="flex items-center">
                    <Cpu className="mr-2 h-4 w-4" />
                    <span>GPT-4.5 Preview (Best)</span>
                  </div>
                </SelectItem>
              </SelectGroup>
            </SelectContent>
          </Select>
          <Button variant="ghost" size="icon" className="ml-2">
            <Settings className="h-4 w-4" />
          </Button>
        </div>
      </div>
      
      <ScrollArea className="flex-1 p-4">
        <div className="space-y-4">
          {messages.map((message) => (
            <div
              key={message.id}
              className={cn(
                'max-w-[85%] rounded-lg p-3',
                message.isUser
                  ? 'bg-primary-100 text-primary-900 ml-auto'
                  : 'bg-gray-100 text-gray-900'
              )}
            >
              <div className={cn(
                'text-xs mb-1 font-semibold',
                message.isUser ? 'text-primary-600' : 'text-gray-500'
              )}>
                {message.isUser ? 'You' : 'Assistant'}
              </div>
              <div className="text-sm">
                {message.content}
              </div>
            </div>
          ))}
          
          {isLoading && (
            <div className="bg-gray-100 text-gray-900 max-w-[80%] rounded-lg p-3">
              <div className="text-xs mb-1 font-semibold text-gray-500">Assistant</div>
              <div className="flex space-x-2">
                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce delay-75"></div>
                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce delay-150"></div>
              </div>
            </div>
          )}
        </div>
      </ScrollArea>
      
      <form onSubmit={handleSendMessage} className="p-3 border-t flex gap-2 relative">
        <Input
          value={input}
          onChange={(e) => setInput(e.target.value)}
          placeholder="Describe the process you want to model..."
          className="flex-1"
          disabled={isLoading}
        />
        <Button type="submit" size="icon" disabled={isLoading}>
          <Send className="h-4 w-4" />
        </Button>
        
        {/* Loading icon in bottom left corner */}
        {pollingStatus === 'polling' && (
          <div className="absolute left-3 bottom-[-15px]">
            <LoadingIcon size={12} className="text-primary/70" />
          </div>
        )}
      </form>
    </div>
  );
};

export default BpmnGeneratorChat;
